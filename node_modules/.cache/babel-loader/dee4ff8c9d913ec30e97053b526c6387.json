{"ast":null,"code":"// import React, { Component } from 'react';\n// import axios from 'axios';\n// import {withRouter} from 'react-router-dom'\n// import { Select, Upload, message } from 'antd';\n// import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n// import { saveBook} from \"../../actions\";\n// import {connect} from 'react-redux'\n//\n// class Misc extends Component {\n//     state = {\n//         data: {\n//             title: '',\n//             description: '',\n//             price: '',\n//             members: '',\n//             author: '',\n//             genre: null,\n//             seller: null,\n//             image: null\n//         },\n//         loading: true,\n//         imageload: false,\n//         error: false,\n//         imageUrl: ``\n//     }\n//\n//\n//     componentDidMount() {\n//         this.props.fetchBooksGenre()\n//         this.props.fetchBooksSeller()\n//\n//         axios.get('/api/v1/shop/detail/' + this.props.match.params.id)\n//             .then(res => {\n//                 const data = res.data; // get the data array instead of object\n//                 this.setState({ data, loading: false });\n//                 console.log(data);\n//             })\n//             .catch(err => { // log request error and prevent access to undefined state\n//                 this.setState({ loading: false, error: true });\n//                 console.error(err);\n//             })\n//     }\n//\n//\n//     render() {\n//         const {genre, seller} = this.props\n//\n//\n//         function getBase64(img, callback) {\n//             const reader = new FileReader();\n//             reader.addEventListener('load', () => callback(reader.result));\n//             reader.readAsDataURL(img);\n//         }\n//\n//         function beforeUpload(file) {\n//             const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n//             if (!isJpgOrPng) {\n//                 message.error('You can only upload JPG/PNG file!');\n//             }\n//             const isLt2M = file.size / 1024 / 1024 < 2;\n//             if (!isLt2M) {\n//                 message.error('Image must smaller than 2MB!');\n//             }\n//             return isJpgOrPng && isLt2M;\n//         }\n//\n//         const handleChange = (e) => {\n//             console.log(e.target.value)\n//             this.setState({\n//                 data: {...this.state.data, [e.target.name]: e.target.value}\n//             })\n//         }\n//\n//         const categoryChange = value => {\n//             console.log(value)\n//             this.setState({\n//                 data: {...this.state.data, genre: value}\n//             })\n//         }\n//\n//         const sellerChange = value => {\n//             console.log(value)\n//             this.setState({\n//                 data: {...this.state.data, seller: value}\n//             })\n//         }\n//\n//\n//\n//         const uploadButton = (\n//             <div>\n//                 {this.state.imageload ? <LoadingOutlined /> : <PlusOutlined />}\n//                 <div className=\"ant-upload-text\">Upload</div>\n//             </div>\n//         );\n//\n//         const fileChange = info => {\n//             console.log(info)\n//             if (info.file.status === 'uploading') {\n//                 this.setState({\n//                     imageload: true\n//                 })\n//                 return;\n//             }\n//             if (info.file.status === 'done') {\n//                 // Get this url from response in real world.\n//                 getBase64(info.file.originFileObj, imageUrl => {\n//                     this.setState({\n//                         imageload: false,\n//                         imageUrl: imageUrl\n//                     })\n//                 });\n//                 this.setState({data: {...this.state.data, image: info.file.originFileObj}})\n//             }\n//         }\n//\n//         const handleOk = (e) => {\n//             const fm = new FormData()\n//             Object.keys(this.state.data).map(key => {\n//                 fm.append([key],this.state.data[key])\n//             })\n//             console.log(fm)\n//             console.log(this.state.data)\n//             axios.put('/api/v1/shop/detail/' + this.props.match.params.id, fm, {\n//                 headers: {\n//                     \"Content-type\": undefined\n//                 }})\n//                 .then(res => {\n//                     console.log(res.data)\n//\n//\n//                 })\n//                 .catch(err => console.log(err))\n//\n//             // e.preventDefault();\n//         };\n//\n//         const onFinish = values => {\n//             console.log(values);\n//         };\n//\n//         if (this.state.loading) {\n//             return(\n//                 <div>\n//                     <p> Loading... </p>\n//                 </div>\n//             )\n//         }\n//         if (this.state.error || !this.state.data) { // if request failed or data is empty don't try to access it either\n//             return(\n//                 <div>\n//                     <p> An error occured </p>\n//                 </div>\n//             )\n//         }\n//         return (\n//             <form onSubmit={handleOk}>\n//                 <h2 className=\"center\" >Change data</h2>\n//                 <h5>Title:</h5>\n//                 <input type=\"text\" name=\"title\" value={ this.state.data.title } onChange={handleChange}/>\n//                 <h5>description:</h5>\n//                 <input type=\"text\" name=\"description\" value={ this.state.data.description } onChange={handleChange} />\n//                 <h5>Price:</h5>\n//                 <input type=\"text\" name=\"price\" value={ this.state.data.price } onChange={handleChange}/>\n//                 <h5>Member:</h5>\n//                 <input type=\"text\" name=\"member\" value={ this.state.data.member } onChange={handleChange}/>\n//\n//                 <h5>Author:</h5>\n//                 <input type=\"text\" name=\"author\" value={ this.state.data.author } onChange={handleChange}/>\n//                 <Select onChange={categoryChange} name=\"genre\">\n//                     {genre.map(item => (<option value={item.id}>{item.name}</option>))}\n//                 </Select>\n//                 <Select onChange={categoryChange} name=\"seller\">\n//                     {seller.map(item => (<option value={item.id}>{item.username}</option>))}\n//                 </Select>\n//\n//                 <Upload\n//                     name=\"image\"\n//                     listType=\"picture-card\"\n//                     className=\"avatar-uploader\"\n//                     showUploadList={false}\n//                     action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n//                     beforeUpload={beforeUpload}\n//                     onChange={fileChange}\n//                 >\n//                     {this.state.imageUrl ? <img src={this.state.imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n//                 </Upload>\n//\n//                 <input type=\"submit\" className=\"btn-large waves-effect waves-light xbutton\" value=\"Save\"/>\n//             </form>\n//\n//\n//\n//         );\n//     }\n// }\n//\n//\n// const mapStateToProps = ({ genreList: { genre }, sellerList: {seller}} ) => {\n//     return { genre, seller }\n// };\n//\n//\n//\n// const mapDispatchToProps = {\n//     fetchBooksSeller,\n//     fetchBooksGenre,\n//     saveBook\n//\n//\n//     // onAddedToCart: (id) => dispatch(bookAddedToCart(id))\n//\n//\n//     // return bindActionCreators({\n//     //     booksLoaded\n//     // }, dispatch);\n//     // booksLoaded: (newBooks) => {\n//     //     dispatch(booksLoaded(newBooks));\n//     // }\n//\n// };\n//\n//\n// export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Misc));","map":{"version":3,"sources":["/Users/yeldarlimton/Documents/spring-client/src/components/pages/edit-item-form.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import axios from 'axios';\n// import {withRouter} from 'react-router-dom'\n// import { Select, Upload, message } from 'antd';\n// import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n// import { saveBook} from \"../../actions\";\n// import {connect} from 'react-redux'\n//\n// class Misc extends Component {\n//     state = {\n//         data: {\n//             title: '',\n//             description: '',\n//             price: '',\n//             members: '',\n//             author: '',\n//             genre: null,\n//             seller: null,\n//             image: null\n//         },\n//         loading: true,\n//         imageload: false,\n//         error: false,\n//         imageUrl: ``\n//     }\n//\n//\n//     componentDidMount() {\n//         this.props.fetchBooksGenre()\n//         this.props.fetchBooksSeller()\n//\n//         axios.get('/api/v1/shop/detail/' + this.props.match.params.id)\n//             .then(res => {\n//                 const data = res.data; // get the data array instead of object\n//                 this.setState({ data, loading: false });\n//                 console.log(data);\n//             })\n//             .catch(err => { // log request error and prevent access to undefined state\n//                 this.setState({ loading: false, error: true });\n//                 console.error(err);\n//             })\n//     }\n//\n//\n//     render() {\n//         const {genre, seller} = this.props\n//\n//\n//         function getBase64(img, callback) {\n//             const reader = new FileReader();\n//             reader.addEventListener('load', () => callback(reader.result));\n//             reader.readAsDataURL(img);\n//         }\n//\n//         function beforeUpload(file) {\n//             const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n//             if (!isJpgOrPng) {\n//                 message.error('You can only upload JPG/PNG file!');\n//             }\n//             const isLt2M = file.size / 1024 / 1024 < 2;\n//             if (!isLt2M) {\n//                 message.error('Image must smaller than 2MB!');\n//             }\n//             return isJpgOrPng && isLt2M;\n//         }\n//\n//         const handleChange = (e) => {\n//             console.log(e.target.value)\n//             this.setState({\n//                 data: {...this.state.data, [e.target.name]: e.target.value}\n//             })\n//         }\n//\n//         const categoryChange = value => {\n//             console.log(value)\n//             this.setState({\n//                 data: {...this.state.data, genre: value}\n//             })\n//         }\n//\n//         const sellerChange = value => {\n//             console.log(value)\n//             this.setState({\n//                 data: {...this.state.data, seller: value}\n//             })\n//         }\n//\n//\n//\n//         const uploadButton = (\n//             <div>\n//                 {this.state.imageload ? <LoadingOutlined /> : <PlusOutlined />}\n//                 <div className=\"ant-upload-text\">Upload</div>\n//             </div>\n//         );\n//\n//         const fileChange = info => {\n//             console.log(info)\n//             if (info.file.status === 'uploading') {\n//                 this.setState({\n//                     imageload: true\n//                 })\n//                 return;\n//             }\n//             if (info.file.status === 'done') {\n//                 // Get this url from response in real world.\n//                 getBase64(info.file.originFileObj, imageUrl => {\n//                     this.setState({\n//                         imageload: false,\n//                         imageUrl: imageUrl\n//                     })\n//                 });\n//                 this.setState({data: {...this.state.data, image: info.file.originFileObj}})\n//             }\n//         }\n//\n//         const handleOk = (e) => {\n//             const fm = new FormData()\n//             Object.keys(this.state.data).map(key => {\n//                 fm.append([key],this.state.data[key])\n//             })\n//             console.log(fm)\n//             console.log(this.state.data)\n//             axios.put('/api/v1/shop/detail/' + this.props.match.params.id, fm, {\n//                 headers: {\n//                     \"Content-type\": undefined\n//                 }})\n//                 .then(res => {\n//                     console.log(res.data)\n//\n//\n//                 })\n//                 .catch(err => console.log(err))\n//\n//             // e.preventDefault();\n//         };\n//\n//         const onFinish = values => {\n//             console.log(values);\n//         };\n//\n//         if (this.state.loading) {\n//             return(\n//                 <div>\n//                     <p> Loading... </p>\n//                 </div>\n//             )\n//         }\n//         if (this.state.error || !this.state.data) { // if request failed or data is empty don't try to access it either\n//             return(\n//                 <div>\n//                     <p> An error occured </p>\n//                 </div>\n//             )\n//         }\n//         return (\n//             <form onSubmit={handleOk}>\n//                 <h2 className=\"center\" >Change data</h2>\n//                 <h5>Title:</h5>\n//                 <input type=\"text\" name=\"title\" value={ this.state.data.title } onChange={handleChange}/>\n//                 <h5>description:</h5>\n//                 <input type=\"text\" name=\"description\" value={ this.state.data.description } onChange={handleChange} />\n//                 <h5>Price:</h5>\n//                 <input type=\"text\" name=\"price\" value={ this.state.data.price } onChange={handleChange}/>\n//                 <h5>Member:</h5>\n//                 <input type=\"text\" name=\"member\" value={ this.state.data.member } onChange={handleChange}/>\n//\n//                 <h5>Author:</h5>\n//                 <input type=\"text\" name=\"author\" value={ this.state.data.author } onChange={handleChange}/>\n//                 <Select onChange={categoryChange} name=\"genre\">\n//                     {genre.map(item => (<option value={item.id}>{item.name}</option>))}\n//                 </Select>\n//                 <Select onChange={categoryChange} name=\"seller\">\n//                     {seller.map(item => (<option value={item.id}>{item.username}</option>))}\n//                 </Select>\n//\n//                 <Upload\n//                     name=\"image\"\n//                     listType=\"picture-card\"\n//                     className=\"avatar-uploader\"\n//                     showUploadList={false}\n//                     action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n//                     beforeUpload={beforeUpload}\n//                     onChange={fileChange}\n//                 >\n//                     {this.state.imageUrl ? <img src={this.state.imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n//                 </Upload>\n//\n//                 <input type=\"submit\" className=\"btn-large waves-effect waves-light xbutton\" value=\"Save\"/>\n//             </form>\n//\n//\n//\n//         );\n//     }\n// }\n//\n//\n// const mapStateToProps = ({ genreList: { genre }, sellerList: {seller}} ) => {\n//     return { genre, seller }\n// };\n//\n//\n//\n// const mapDispatchToProps = {\n//     fetchBooksSeller,\n//     fetchBooksGenre,\n//     saveBook\n//\n//\n//     // onAddedToCart: (id) => dispatch(bookAddedToCart(id))\n//\n//\n//     // return bindActionCreators({\n//     //     booksLoaded\n//     // }, dispatch);\n//     // booksLoaded: (newBooks) => {\n//     //     dispatch(booksLoaded(newBooks));\n//     // }\n//\n// };\n//\n//\n// export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Misc));"]},"metadata":{},"sourceType":"module"}