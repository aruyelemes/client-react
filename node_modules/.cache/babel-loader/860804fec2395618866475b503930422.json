{"ast":null,"code":"// import React, {useState, useEffect} from 'react';\n// import { Modal, Form, Input, Select, Upload, message } from 'antd';\n// import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n//\n//\n// import { connect } from 'react-redux'\n// import {fetchBooksGenre, saveBook, fetchBooksSeller} from \"../actions\";\n// import {compose} from \"../utils\";\n// import {withBookstoreService} from \"./hoc\";\n// const {Option} = Select\n//\n// function getBase64(img, callback) {\n//     const reader = new FileReader();\n//     reader.addEventListener('load', () => callback(reader.result));\n//     reader.readAsDataURL(img);\n// }\n//\n// function beforeUpload(file) {\n//     const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n//     if (!isJpgOrPng) {\n//         message.error('You can only upload JPG/PNG file!');\n//     }\n//     const isLt2M = file.size / 1024 / 1024 < 2;\n//     if (!isLt2M) {\n//         message.error('Image must smaller than 2MB!');\n//     }\n//     return isJpgOrPng && isLt2M;\n// }\n//\n// const onMount = props => () => {\n//     props.fetchBooksGenre()\n//     props.fetchBooksSeller()\n//\n// }\n//\n// // function randomInteger(min, max) {\n// //     // получить случайное число от (min-0.5) до (max+0.5)\n// //     let rand = min - 0.5 + Math.random() * (max - min + 1);\n// //     return Math.round(rand);\n// // }\n//\n// function ModalBook(props) {\n//     const {modalBlogVisible, close } = props\n//     const [visible, setVisible] = useState(modalBlogVisible)\n//     const [imageUrl, setImageUrl] = useState(``)\n//     const [loading, setLoading] = useState(false)\n//     const {genre, seller} = props\n//     const [formData, setFormData] = useState({\n//         title: ``,\n//         description: ``,\n//         price: 0,\n//         member: ``,\n//         author: ``,\n//         genre: null,\n//         image: null,\n//         seller: null\n//     })\n//\n//     useEffect(() => {\n//         setVisible(modalBlogVisible)\n//     }, [modalBlogVisible])\n//\n//\n//\n//     useEffect(onMount(props), [])\n//\n//\n//\n//     const handleOk = () => {\n//         props.saveBook(formData)\n//\n//         close();\n//     };\n//\n//     const onFinish = values => {\n//         console.log(values);\n//     };\n//\n//     const validateMessages = {\n//         required: '${label} is required!',\n//         types: {\n//             email: '${label} is not validate email!',\n//             number: '${label} is not a validate number!',\n//         },\n//         number: {\n//             range: '${label} must be between ${min} and ${max}',\n//         },\n//     };\n//\n//     const handleChange = e => {\n//         console.log(e.target.value)\n//         setFormData({...formData, [e.target.name]: e.target.value})\n//     }\n//\n//     const categoryChange = value => {\n//         console.log(value)\n//         setFormData({...formData, genre: value})\n//     }\n//\n//     const sellerChange = value => {\n//         console.log(value)\n//         setFormData({...formData, seller: value})\n//     }\n//\n//\n//\n//     const uploadButton = (\n//         <div>\n//             {loading ? <LoadingOutlined /> : <PlusOutlined />}\n//             <div className=\"ant-upload-text\">Upload</div>\n//         </div>\n//     );\n//\n//     const fileChange = info => {\n//         console.log(info)\n//         if (info.file.status === 'uploading') {\n//             setLoading(true);\n//             return;\n//         }\n//         if (info.file.status === 'done') {\n//             // Get this url from response in real world.\n//             getBase64(info.file.originFileObj, imageUrl => {\n//                 setLoading(false);\n//                 setImageUrl(imageUrl)\n//             });\n//\n//             setFormData({...formData, image: info.file.originFileObj})\n//         }\n//     }\n//\n//\n//     return (\n//         <Modal\n//             title=\"Add Book\"\n//             visible={visible}\n//             onOk={handleOk}\n//             onCancel={close}\n//         >\n//\n//             <Form layout=\"vertical\" name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\n//                 <Form.Item name={['book', 'title']} label=\"Title\" rules={[{ required: true }]}>\n//                     <Input name=\"title\" value={formData.title} onChange={handleChange}/>\n//                 </Form.Item>\n//\n//\n//\n//                 <Form.Item name={['book', 'description']} label=\"Description\">\n//                     <Input.TextArea name=\"description\" value={formData.description} onChange={handleChange}/>\n//                 </Form.Item>\n//\n//\n//\n//                 <Form.Item name={['book', 'price']} label=\"Price\" rules={[{ required: true }]}>\n//                     <Input name=\"price\" value={formData.price} onChange={handleChange} />\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'member']} label=\"Member\" rules={[{ required: true }]}>\n//                     <Input name=\"member\" value={formData.member} onChange={handleChange} />\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'author']} label=\"Author\" rules={[{ required: true }]}>\n//                     <Input name=\"author\" value={formData.author} onChange={handleChange} />\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'genre']} label=\"Genre\">\n//                     <Select onChange={categoryChange} name=\"genre\">\n//                         {genre.map(item => (<Option value={item.id}>{item.name}</Option>))}\n//                     </Select>\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'seller']} label=\"Seller\">\n//                     <Select onChange={sellerChange} name=\"seller\">\n//                         {seller.map(item => (<Option value={item.id}>{item.username}</Option>))}\n//                     </Select>\n//                 </Form.Item>\n//\n//                 <Form.Item>\n//                     <Upload\n//                         name=\"image\"\n//                         listType=\"picture-card\"\n//                         className=\"avatar-uploader\"\n//                         showUploadList={false}\n//                         action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n//                         beforeUpload={beforeUpload}\n//                         onChange={fileChange}\n//                     >\n//                         {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n//                     </Upload>\n//                 </Form.Item>\n//\n//             </Form>\n//\n//         </Modal>\n//     );\n// }\n//\n// const mapStateToProps = ({ genreList: { genre }, sellerList: {seller}} ) => {\n//     return { genre, seller }\n// };\n//\n//\n//\n// const mapDispatchToProps = {\n//         fetchBooksSeller,\n//         fetchBooksGenre,\n//         saveBook\n//\n//\n//     // onAddedToCart: (id) => dispatch(bookAddedToCart(id))\n//\n//\n//     // return bindActionCreators({\n//     //     booksLoaded\n//     // }, dispatch);\n//     // booksLoaded: (newBooks) => {\n//     //     dispatch(booksLoaded(newBooks));\n//     // }\n//\n// };\n//\n// export default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(ModalBook);\n//\n//","map":{"version":3,"sources":["/Users/yeldarlimton/Documents/spring-client/src/components/book-modal.js"],"names":[],"mappingssourcesContent":["// import React, {useState, useEffect} from 'react';\n// import { Modal, Form, Input, Select, Upload, message } from 'antd';\n// import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n//\n//\n// import { connect } from 'react-redux'\n// import {fetchBooksGenre, saveBook, fetchBooksSeller} from \"../actions\";\n// import {compose} from \"../utils\";\n// import {withBookstoreService} from \"./hoc\";\n// const {Option} = Select\n//\n// function getBase64(img, callback) {\n//     const reader = new FileReader();\n//     reader.addEventListener('load', () => callback(reader.result));\n//     reader.readAsDataURL(img);\n// }\n//\n// function beforeUpload(file) {\n//     const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n//     if (!isJpgOrPng) {\n//         message.error('You can only upload JPG/PNG file!');\n//     }\n//     const isLt2M = file.size / 1024 / 1024 < 2;\n//     if (!isLt2M) {\n//         message.error('Image must smaller than 2MB!');\n//     }\n//     return isJpgOrPng && isLt2M;\n// }\n//\n// const onMount = props => () => {\n//     props.fetchBooksGenre()\n//     props.fetchBooksSeller()\n//\n// }\n//\n// // function randomInteger(min, max) {\n// //     // получить случайное число от (min-0.5) до (max+0.5)\n// //     let rand = min - 0.5 + Math.random() * (max - min + 1);\n// //     return Math.round(rand);\n// // }\n//\n// function ModalBook(props) {\n//     const {modalBlogVisible, close } = props\n//     const [visible, setVisible] = useState(modalBlogVisible)\n//     const [imageUrl, setImageUrl] = useState(``)\n//     const [loading, setLoading] = useState(false)\n//     const {genre, seller} = props\n//     const [formData, setFormData] = useState({\n//         title: ``,\n//         description: ``,\n//         price: 0,\n//         member: ``,\n//         author: ``,\n//         genre: null,\n//         image: null,\n//         seller: null\n//     })\n//\n//     useEffect(() => {\n//         setVisible(modalBlogVisible)\n//     }, [modalBlogVisible])\n//\n//\n//\n//     useEffect(onMount(props), [])\n//\n//\n//\n//     const handleOk = () => {\n//         props.saveBook(formData)\n//\n//         close();\n//     };\n//\n//     const onFinish = values => {\n//         console.log(values);\n//     };\n//\n//     const validateMessages = {\n//         required: '${label} is required!',\n//         types: {\n//             email: '${label} is not validate email!',\n//             number: '${label} is not a validate number!',\n//         },\n//         number: {\n//             range: '${label} must be between ${min} and ${max}',\n//         },\n//     };\n//\n//     const handleChange = e => {\n//         console.log(e.target.value)\n//         setFormData({...formData, [e.target.name]: e.target.value})\n//     }\n//\n//     const categoryChange = value => {\n//         console.log(value)\n//         setFormData({...formData, genre: value})\n//     }\n//\n//     const sellerChange = value => {\n//         console.log(value)\n//         setFormData({...formData, seller: value})\n//     }\n//\n//\n//\n//     const uploadButton = (\n//         <div>\n//             {loading ? <LoadingOutlined /> : <PlusOutlined />}\n//             <div className=\"ant-upload-text\">Upload</div>\n//         </div>\n//     );\n//\n//     const fileChange = info => {\n//         console.log(info)\n//         if (info.file.status === 'uploading') {\n//             setLoading(true);\n//             return;\n//         }\n//         if (info.file.status === 'done') {\n//             // Get this url from response in real world.\n//             getBase64(info.file.originFileObj, imageUrl => {\n//                 setLoading(false);\n//                 setImageUrl(imageUrl)\n//             });\n//\n//             setFormData({...formData, image: info.file.originFileObj})\n//         }\n//     }\n//\n//\n//     return (\n//         <Modal\n//             title=\"Add Book\"\n//             visible={visible}\n//             onOk={handleOk}\n//             onCancel={close}\n//         >\n//\n//             <Form layout=\"vertical\" name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\n//                 <Form.Item name={['book', 'title']} label=\"Title\" rules={[{ required: true }]}>\n//                     <Input name=\"title\" value={formData.title} onChange={handleChange}/>\n//                 </Form.Item>\n//\n//\n//\n//                 <Form.Item name={['book', 'description']} label=\"Description\">\n//                     <Input.TextArea name=\"description\" value={formData.description} onChange={handleChange}/>\n//                 </Form.Item>\n//\n//\n//\n//                 <Form.Item name={['book', 'price']} label=\"Price\" rules={[{ required: true }]}>\n//                     <Input name=\"price\" value={formData.price} onChange={handleChange} />\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'member']} label=\"Member\" rules={[{ required: true }]}>\n//                     <Input name=\"member\" value={formData.member} onChange={handleChange} />\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'author']} label=\"Author\" rules={[{ required: true }]}>\n//                     <Input name=\"author\" value={formData.author} onChange={handleChange} />\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'genre']} label=\"Genre\">\n//                     <Select onChange={categoryChange} name=\"genre\">\n//                         {genre.map(item => (<Option value={item.id}>{item.name}</Option>))}\n//                     </Select>\n//                 </Form.Item>\n//\n//                 <Form.Item name={['book', 'seller']} label=\"Seller\">\n//                     <Select onChange={sellerChange} name=\"seller\">\n//                         {seller.map(item => (<Option value={item.id}>{item.username}</Option>))}\n//                     </Select>\n//                 </Form.Item>\n//\n//                 <Form.Item>\n//                     <Upload\n//                         name=\"image\"\n//                         listType=\"picture-card\"\n//                         className=\"avatar-uploader\"\n//                         showUploadList={false}\n//                         action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n//                         beforeUpload={beforeUpload}\n//                         onChange={fileChange}\n//                     >\n//                         {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n//                     </Upload>\n//                 </Form.Item>\n//\n//             </Form>\n//\n//         </Modal>\n//     );\n// }\n//\n// const mapStateToProps = ({ genreList: { genre }, sellerList: {seller}} ) => {\n//     return { genre, seller }\n// };\n//\n//\n//\n// const mapDispatchToProps = {\n//         fetchBooksSeller,\n//         fetchBooksGenre,\n//         saveBook\n//\n//\n//     // onAddedToCart: (id) => dispatch(bookAddedToCart(id))\n//\n//\n//     // return bindActionCreators({\n//     //     booksLoaded\n//     // }, dispatch);\n//     // booksLoaded: (newBooks) => {\n//     //     dispatch(booksLoaded(newBooks));\n//     // }\n//\n// };\n//\n// export default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(ModalBook);\n//\n//\n"]},"metadata":{},"sourceType":"module"}